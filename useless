#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <time.h>
#define BUF_SIZE 14
int number;    
char* normal_strcat(char* s1, char* s2, int size, int rr)
{
    int i = 0;
	for(;i<rr;i++) s1[i + size*BUF_SIZE] = s2[i];
    return s1;
}
int deg(int k)    
{
    int a=1,i=0;
    for (;i<k;i++) a*=10;
    return a;
}
int get_time(char* st)
{
    int* a;
    int i=0, n=0, time;
    a=(int*)malloc(sizeof(int));
    while (st[i]!=' ')
    {

	if ((st[i])>='0' && (st[i]) <='9')
	{
	    a[i]=(int)(st[i]-'0');
	    a=realloc(a,sizeof(int)*(i+1));
	    i++;
	}
	if ((st[i] <'0' || st[i]>'9') && st[i]!=' ')
	{
	    printf("incorrect time \n");
	    exit(-1);
	}
    }
    number=i;
    a=realloc(a,i*sizeof(int));
    for(;n<=i;n++) time+=(a[n]*deg(i-n-1));
    free(a);
    return time;
}
int main(int argc, char** argv)
{
    char *workstring, *ustring, *uustring, *bufstring;
    int time, fd, i=0, j=0, k, n=0, m=0, fr, counter = 0;
    size_t rr;
    pid_t ppid;
    umask(0);
    if (close(0)<0)
    {
	printf("close error");
	exit(-1);
    }
    if (argc<2) 
    {
	printf("not enough arguments");
	exit(-1);
    }
   if (fd=open(argv[1],O_RDONLY)<0)
    {
    printf("open error");
    exit(-1);
    }
    workstring=(char*)malloc(sizeof(char)*BUF_SIZE);
    bufstring=(char*)malloc(sizeof(char)*BUF_SIZE);
    while ((rr = read(fd,bufstring,BUF_SIZE))>0)
    { 
    	workstring=realloc(workstring,sizeof(char)*(BUF_SIZE*(counter + 1))); 
    	normal_strcat(workstring,bufstring,counter, rr);
	counter++;
    }
    free(bufstring);
    ustring=(char*)malloc(sizeof(char));
    uustring=(char*)malloc(sizeof(char)); 
    for(;i<strlen(workstring);i++)
    {
	if (workstring[i]!='\n' && workstring[i]!='\0'&&  i!=(strlen(workstring)-1))
	{
	    ustring[j]=workstring[i];
	    if (workstring[i] == ' ' && workstring[i+1] == ' ')
	    {
		printf("incorrect input");
		exit(-1);
	    }
	    j++;
	    ustring=realloc(ustring,sizeof(char)*(j)); 
	}
	if (workstring[i]=='\n' || workstring[i]=='\0' || i==(strlen(workstring)-1))
	{
	    j=0;
		time=get_time(ustring);
		uustring=realloc(uustring,((strlen(ustring)-number-1))*sizeof(char));
		n=number+1;
		m=0;
		for(;n<strlen(ustring);n++)
		{
		    uustring[m]=ustring[n];
		    m++;
		}
		uustring=realloc(uustring,(m)*sizeof(char));
		fr=fork();
		if (fr<0)
		{
		    printf("fork error");
		    exit(-1);
		}
		if (fr==0)
		{
		    sleep(time);
		    execl(uustring,uustring,NULL);
		    printf("execl error");
		    exit(-1);
		}
	} 
    }
    free (workstring);
    free (ustring);
    free (uustring);
    return 0;
}    
